namespace resgenEx.FileFormats
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Resources;
    using System.Runtime.Serialization;

    class PoItem : ResourceItem, ISerializable
    {
        string _metadata_po_rawComments;
        bool _metadata_po_fuzzy;

        /// <summary>
        /// Extracts the generic translator comments and any "extracted-comment" that we didn't autogenerate 
        /// from the raw set of .po formatted comments.
        /// </summary>
        static string GeneralPurposeComment(string rawPoComment)
        {
            StringBuilder result = new StringBuilder();

            string[] lines = rawPoComment.Split('\n');
            bool ignoreRemainingExtractedComment = false;

            foreach (string line in lines) {
                if (line.Length > 0 && line[0] == '#') {
                    
                    if (line.Length == 1) {
                        result.AppendLine();
                    } else {
                        if (Char.IsWhiteSpace(line[1])) {
                            result.AppendLine(line.Substring(2).Trim());
                        } else if (line[1] == '.') {
                            // It's an extracted-comment, we'll include those too (unless they were automatically generated)

                            if (line.StartsWith(ResGen.cOriginalMessageComment_Prefix.TrimEnd())) {
                                // It's one of our auto generated comments
                                // There's no place in .resx files for these, ignore it.
                                ignoreRemainingExtractedComment = true; // it might be a multiline autogenerated comment, so ignore any #. comments from now on

                                // The presence of an auto generated comment probably means there was a blank line Append() to the end of result.
                                // We'll have to Trim the end of Result(), or find a better way to do this.
                            }

                            if (!ignoreRemainingExtractedComment) result.AppendLine(line.Substring(2).Trim());
                        }
                    }
                }
            }
            return result.ToString().TrimEnd();
        }

        public string Metadata_PoRawComments { get { return _metadata_po_rawComments; } }
        public bool Metadata_PoFlag_Fuzzy { get { return _metadata_po_fuzzy; } }

        public override ResXDataNode ToResXDataNode()
        {
            // Don't include fuzzy items in resx files
            return _metadata_po_fuzzy ? null : base.ToResXDataNode();
        }

        public PoItem(string msgid, string msgstr, string rawComment, bool fuzzy):base(msgid, msgstr, GeneralPurposeComment(rawComment))
        {
            _metadata_po_fuzzy = fuzzy;
            _metadata_po_rawComments = rawComment;
        }
    }
}
