namespace resgenEx.FileFormats
{
    using System;
    using System.Collections;
    using System.IO;
    using System.Reflection;
    using System.Resources;
    using System.Text;

    class PoResourceReader : IResourceReader
    {
        Hashtable data;
        Stream s;
        CommentOptions commentOptions;
        int line_num;

        public PoResourceReader(Stream stream, CommentOptions aCommentOptions)
        {
            data = new Hashtable();
            s = stream;
            commentOptions = aCommentOptions;
            Load();
        }

        public virtual void Close()
        {
            s.Close();
        }

        public IDictionaryEnumerator GetEnumerator()
        {
            return data.GetEnumerator();
        }

        string GetValue(string line)
        {
            int begin = line.IndexOf('"');
            if (begin == -1)
                throw new FormatException(String.Format("No begin quote at line {0}: {1}", line_num, line));

            int end = line.LastIndexOf('"');
            if (end == -1)
                throw new FormatException(String.Format("No closing quote at line {0}: {1}", line_num, line));

            return line.Substring(begin + 1, end - begin - 1);
        }

        void AddData(string msgid, string msgstr, string comment, int sourceLineNumber)
        {
            if (String.IsNullOrEmpty(msgid)) {
                Console.WriteLine("Error: Found empty msgid - will skip it. Line: " + sourceLineNumber);
            } else {
                if (String.IsNullOrEmpty(comment)) {
                    data.Add(msgid, msgstr);
                } else {
                    ResXDataNode dataNode = new ResXDataNode(msgid, msgstr);
                    dataNode.Comment = comment;
                    data.Add(msgid, dataNode);
                }
            }
        }

        void Load()
        {
            StreamReader reader = new StreamReader(s);
            string line;
            string msgid = null;
            string msgstr = null;
            string comment = null;
            bool ignoreNext = false;
            bool ignoreNextExtractedComment = false;

            while ((line = reader.ReadLine()) != null) {
                line_num++;
                line = line.Trim();
                if (line.Length == 0) {
                    comment = null;
                    continue;
                }

                if (line[0] == '#') {

                    if (line.Length > 1 && line[1] == '.') {

                        if (!ignoreNextExtractedComment) {

                            // It's an extracted comment
                            if (line.StartsWith(ResGen.cOriginalMessageComment_Prefix)) {
                                // It's one of our auto generated comments
                                /* There's no place in .resx files for these, ignore it.
                                if (commentOptions == CommentOptions.writeFullComments) {
                                    comment = (comment == null ? String.Empty : comment + "\n");
                                    comment += line.Substring(ResGen.cOriginalMessageComment_Prefix.Length);
                                }*/
                                // The presence of an auto generated comment probably means there was a blank line added to the end of the comment.
                                if (comment != null && comment.Length > 0 && (comment[comment.Length - 1] == '\n')) {
                                    comment = comment.Substring(0, comment.Length - 1);
                                }
                                ignoreNextExtractedComment = true; // it might be a multiline autogenerated comment, so ignore any #. comments from now on

                            } else {
                                // It's a normal extracted comment
                                if (commentOptions != CommentOptions.writeNoComments) {
                                    comment = (comment == null ? String.Empty : comment + "\n");
                                    comment += line.Substring(2).TrimStart();
                                }
                            }
                        }
                    }


                    if (line.Length == 1 || line[1] != ',')
                        continue;

                    if (line.IndexOf("fuzzy") != -1) {
                        ignoreNext = true;
                        if (msgid != null) {
                            if (msgstr == null)
                                throw new FormatException("Error. Line: " + line_num);

                            AddData(msgid, msgstr, comment, line_num);
                            msgid = null;
                            msgstr = null;
                            comment = null;
                            ignoreNextExtractedComment = false;
                        }
                    }
                    continue;
                }

                if (line.StartsWith("msgid ")) {
                    if (msgid == null && msgstr != null)
                        throw new FormatException("Found 2 consecutive msgid. Line: " + line_num);

                    if (msgstr != null) {
                        if (!ignoreNext)
                            AddData(msgid, msgstr, comment, line_num);

                        ignoreNext = false;
                        msgid = null;
                        msgstr = null;
                        comment = null;
                        ignoreNextExtractedComment = false;
                    }

                    msgid = GetValue(line);
                    continue;
                }

                if (line.StartsWith("msgstr ")) {
                    if (msgid == null)
                        throw new FormatException("msgstr with no msgid. Line: " + line_num);

                    msgstr = GetValue(line);
                    continue;
                }

                if (line[0] == '"') {
                    if (msgid == null || msgstr == null)
                        throw new FormatException("Invalid format. Line: " + line_num);

                    msgstr += GetValue(line);
                    continue;
                }

                throw new FormatException("Unexpected data. Line: " + line_num);
            }

            if (msgid != null) {
                if (msgstr == null)
                    throw new FormatException("Expecting msgstr. Line: " + line_num);

                if (!ignoreNext) {
                    AddData(msgid, msgstr, comment, line_num);
                }
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        void IDisposable.Dispose()
        {
            if (data != null)
                data = null;

            if (s != null) {
                s.Close();
                s = null;
            }
        }
    }
}
